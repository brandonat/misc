x(sales)
round(.005,.01)
round(.005,2)
round(.005,-2)
round(.005,1)
round(.005,2)
round(.005,3)
round(.005,digits=3)
round(.0055,digits=3)
round(.006,digits=3)
round(.006,digits=2)
sensitivity <- function(response,abs_chg,...) {
if (abs_chg < 0 | abs_chg > 1) stop("abs_chg must be between 0-1")
ac <- round(abs_chg,2)
chg <- seq(1-ac,1+ac,.01)
chg
}
sensitivity(abs_chg=.02)
sensitivity(abs_chg=.2)
sensitivity <- function(response,abs_chg,...) {
if (abs_chg < 0 | abs_chg > 1) stop("abs_chg must be between 0-1")
ac <- round(abs_chg,2)
chg <- seq(1-ac,1+ac,.01)
vars <- list(...)
}
sensitivity(response=npv,abs_chg=.2,sales)
sensitivity <- function(response,abs_chg,...) {
if (abs_chg < 0 | abs_chg > 1) stop("abs_chg must be between 0-1")
ac <- round(abs_chg,2)
chg <- seq(1-ac,1+ac,.01)
vars <- list(...)
vars
}
sensitivity(response=npv,abs_chg=.2,sales)
sensitivity(response=npv,abs_chg=.2,sales,salvage)
sensitivity(response=npv,abs_chg=2,sales,salvage)
as.data.frame
data.frame
cf0 <- function(fcinv,wc) {
fcinv + wc
}
cfi <- funnction(price,sales,vcost,fcost,dep,tax) {
(price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
}
cft <- function(salvage,tax,wc) {
salvage - (salvage - 0)*tax + wc
}
cf0 <- function(fcinv,wc) {
fcinv + wc
}
cfi <- funnction(price,sales,vcost,fcost,dep,tax) {
(price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
}
cfi <- function(price,sales,vcost,fcost,dep,tax) {
(price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
}
cft <- function(salvage,tax,wc) {
salvage - (salvage - 0)*tax + wc
}
cf0(fcinv,wc)
cfi(price,sales,vcost,fcost,dep,tax)
sales <- 1500
price <- 50
vcost <- 20
fcost <- 5000
salvage <- 10000
fcinv <- 60000
wc <- 15000
dep <- 20000
tax <- 0.4
wacc <- .15
npv <- function(cfinv,wc,price,sales,vcost,fcost,dep,tax,salvage) {
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv <- function(fcinv,wc,price,sales,vcost,fcost,dep,tax,salvage) {
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv(fcinv,wc,price,sales,vcost,fcost,dep,tax,salvage)
source('~/.active-rstudio-document', echo=TRUE)
sensitivity <- function(var,pct_chg) {
if (abs_chg < 0 | abs_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
var * chg
}
sales
sensitivity(sales)
sensitivity(sales,20)
sens <- function(var,pct_chg) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
var * chg
}
chg_var <- function(var,pct_chg) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
var * chg
}
sakes
sales
chg_var(sales)
chg_var(sales,20)
.8 * 1500
1.2 * 1500
nsales <- npv(fcinv,wc,price,chg_var(sales),vcost,fcost,dep,tax,salvage)
nsales <- npv(fcinv,wc,price,chg_var(sales,20),vcost,fcost,dep,tax,salvage)
plot(log(sales/1500),nsales)
nsales <- chg_var(sales,20)
npv_sales <- npv(fcinv,wc,price,nsales,vcost,fcost,dep,tax,salvage)
plot(log(nsales/sales),npv_sales)
as.matrix(rnorm(5))
nvcost <- chg_var(vcost,20)
npv_vcost <- npv(fcinv,wc,price,sales,nvcost,fcost,dep,tax,salvage)
plot(log(nsales/sales),npv_sales,type='l')
lines(log(nvcost/vcost),npv_vcost)
args <- list(
sales = 1500
price = 50
vcost = 20
fcost = 5000
salvage = 10000
fcinv = 60000
wc = 15000
dep = 20000
tax = 0.4
wacc = .15
)
args <- list(
sales = 1500,
price = 50,
vcost = 20,
fcost = 5000,
salvage = 10000,
fcinv = 60000,
wc = 15000,
dep = 20000,
tax = 0.4,
wacc = .15,
)
args <- list(
sales = 1500,
price = 50,
vcost = 20,
fcost = 5000,
salvage = 10000,
fcinv = 60000,
wc = 15000,
dep = 20000,
tax = 0.4,
wacc = .15
)
args
args <- list(
sales = 1500,
price = 50,
vcost = 20,
fcost = 5000,
salvage = 10000,
fcinv = 60000,
wc = 15000,
dep = 20000,
tax = 0.4,
wacc = .15
)
args
npv <- function(fcinv,wc,price,sales,vcost,fcost,dep,tax,salvage) {
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
args(npv)
x <- args(npv)
x
class(x)
formas(npv)
rm(x)
formals(npv)
class(formals(npv))
formals(npv)[1]
formals(npv)[2]
match.call(get, call("get", "abc", i = FALSE, p = 3))
## -> get(x = "abc", pos = 3, inherits = FALSE)
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = match.call())
}
fun(4 * atan(1), u = pi)
spiderplot <- function(fun,pct_cht=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
vars
}
spiderplot(npv,20,sales)
spiderplot(npv,pct_cht=20,sales)
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
vars
}
spiderplot(fun=npv,pct_chg=20,sales)
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
vars
}
spiderplot(fun=npv,pct_chg=20,sales)
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
}
spiderplot(fun=npv,pct_chg=20,sales)
spiderplot(npv,20,sales)
spiderplot(npv,20,"sales")
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
vars
}
spiderplot(npv,20,"sales")
spiderplot(npv,20,c("sales","salvage"))
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
lapply(vars, function(x) print(x))
}
spiderplot(npv,20,c("sales","salvage"))
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
lapply(vars,[[,print(x))
}
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
apply(vars,function(x) print(x))
}
spiderplot(npv,20,c("sales","salvage"))
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
lapply(vars,function(x) print(x))
}
spiderplot(npv,20,c("sales","salvage"))
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
vars <- list(...)
vars
}
spiderplot(npv,20,c("sales","salvage"))
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
lapply(list(...),print)
}
spiderplot()
spiderplot(npv,pct_chg)
spiderplot(npv,pct_chg=20)
spiderplot(npv,pct_chg=20,sales)
spiderplot(npv,pct_chg=20,"sales")
spiderplot(npv,pct_chg=20,"sales","price")
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
for (var %in% list(...)) print(var)
}
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
for (var %in% list(...)) {
print(var)
}
}
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
list(...)
}
spiderplot(npv,pct_chg=20,"sales","price")
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
lapply(list(...),function(x) x * chg)
}
sales <- 1500
price <- 50
vcost <- 20
fcost <- 5000
salvage <- 10000
fcinv <- 60000
wc<- 15000
dep <- 20000
tax <- 0.4
wacc <- .15
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
lapply(list(...),function(x) x * chg)
}
spiderplot(npv,20,sales)
spiderplot(npv,20,sales,price)
spiderplot <- function(fun,pct_chg=20,...) {
if (pct_chg < 0 | pct_chg > 100) stop("abs_chg must be between 0-100")
chg <- seq(1-pct_chg/100, 1+pct_chg/100, .01)
lapply(list(...),function(x) npv(x * chg,...))
}
spiderplot(npv,20,sales,price)
npv <- function(fcinv=fcinv,wc,price,sales,vcost,fcost,dep,tax,salvage) {
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv
npv <- function(price=price,fcinv=fcinv,wc=wc,
sales=sales,vcost=vcost,fcost=fcost,
dep=dep,tax=tax,salvage=salvage,wacc=wacc) {
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(fcinv)
fcinv <- 60000
sales <- 1500
price <- 50
vcost <- 20
fcost <- 5000
salvage <- 10000
wc<- 15000
dep <- 20000
tax <- 0.4
wacc <- .15
# NPV with initial settings
npv <- function(fcinv=fcinv,wc=wc,price=price,
sales=sales,vcost=vcost,fcost=fcost,
dep=dep,tax=tax,salvage=salvage,wacc=wacc) {
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(fcinv)
npv(fcinv,wc)
npv(...)
npv <- function(...) {
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(sales*chg)
npv(sales=sales*chg)
npv(sales=sales*2)
fcinv <- 60000
sales <- 1500
price <- 50
vcost <- 20
fcost <- 5000
salvage <- 10000
wc<- 15000
dep <- 20000
tax <- 0.4
wacc <- .15
# NPV with global initial settings
npv <- function(...) {
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(sales*2)
npv(sales=sales*2)
npv <- function(...) {
match.call(expand.dots = FALSE)$`...`
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(sales=sales*2)
npv(sales=sales)
npv(sales=sales/2)
npv <- function(...) {
match.call()
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(sales=2)
npv(sales()
)
npv <- function(...) {
as.list(match.call())
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(sales=2)
npv(...)
f=function(x) {cat("\nHERE IS THE OUTPUT FOR `f`: "); as.character(substitute(x))}
g=function(...) {cat("I am evaluating the first argument", ..1, "\n"); f(...)}
h=function(z)  {print(z); f(z)}
f
f=function(x) {cat("\nHERE IS THE OUTPUT FOR `f`: "); as.character(substitute(x))}
g=function(...) {cat("I am evaluating the first argument", ..1, "\n"); f(...)}
h=function(z)  {print(z); f(z)}
y <- "Look, I am evaluated!\n"
f(y)
g(y)
h(y)
rm(f,g,h)
rm(y)
npv()
npv <- function(...) {
lapply(list(...),substitute)
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(sales=sales*2)
npv(sales)
npv <- function(...) {
list(...)
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(sales)
npv(sales*2)
npv <- function(...) {
print(list(...))
# Cashflows (assume straightline depreciation)
cf0 <- fcinv + wc
cfi <- (price*sales - vcost*sales - fcost)*(1-tax) + dep*tax
cft <- salvage - (salvage - 0)*tax + wc
-cf0 + cfi/(1+wacc) + cfi/(1+wacc)^2 + (cfi + cft)/(1+wacc)^3
}
npv()
npv(sales)
npv(sales*2)
npv(sales=sales*2)
f <- function(...) {}
f <- function(...) {
deparse(list(...)) }
f
f()
f(sales)
f(sales,price)
f(sales,price,salvage)
c(1,F)
c(1L,F)
typeof(c(1L,F))
structure(1:10,my_attr="This is an attribute")
is.array(matrix(1:3))
matrix(1:6)
matrix(1:6,nrow=3)
is.array(matrix(1:6,nrow=3))
array(1:5,c(1,1,5))
array(1:12,c(2,2,3))
array(1:16,c(2,2,2,2))
a <- mtcars[ 1:5 , c("mpg","hp","gear") ]
b <- mtcars[ 6:10 , c("mpg","disp","gear") ]
a
b
library(plyr)
rbind.fill(a,b)
source('~/Documents/Projects/Portfolio/tsp.R', echo=TRUE)
setwd("~/Documents/Projects/Mortgage Opp Cost")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("FinCal")
source('~/.active-rstudio-document', echo=TRUE)
